/**
 * BankAppApi
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var core_1 = require("@angular/core");
var http_1 = require("@angular/http");
var http_2 = require("@angular/http");
require("rxjs/add/operator/map");
var variables_1 = require("../variables");
var configuration_1 = require("../configuration");
/* tslint:disable:no-unused-variable member-ordering */
var AccountApi = (function () {
    function AccountApi(http, basePath, configuration) {
        this.http = http;
        this.basePath = 'http://localhost:64319';
        this.defaultHeaders = new http_1.Headers();
        this.configuration = new configuration_1.Configuration();
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
        }
    }
    /**
     *
     *
     * @param model
     */
    AccountApi.prototype.accountAddExternalLogin = function (model, extraHttpRequestParams) {
        return this.accountAddExternalLoginWithHttpInfo(model, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json() || {};
            }
        });
    };
    /**
     *
     *
     * @param model
     */
    AccountApi.prototype.accountChangePassword = function (model, extraHttpRequestParams) {
        return this.accountChangePasswordWithHttpInfo(model, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json() || {};
            }
        });
    };
    /**
     *
     *
     * @param provider
     * @param error
     */
    AccountApi.prototype.accountGetExternalLogin = function (provider, error, extraHttpRequestParams) {
        return this.accountGetExternalLoginWithHttpInfo(provider, error, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json() || {};
            }
        });
    };
    /**
     *
     *
     * @param returnUrl
     * @param generateState
     */
    AccountApi.prototype.accountGetExternalLogins = function (returnUrl, generateState, extraHttpRequestParams) {
        return this.accountGetExternalLoginsWithHttpInfo(returnUrl, generateState, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json() || {};
            }
        });
    };
    /**
     *
     *
     * @param returnUrl
     * @param generateState
     */
    AccountApi.prototype.accountGetManageInfo = function (returnUrl, generateState, extraHttpRequestParams) {
        return this.accountGetManageInfoWithHttpInfo(returnUrl, generateState, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json() || {};
            }
        });
    };
    /**
     *
     *
     */
    AccountApi.prototype.accountGetUserInfo = function (extraHttpRequestParams) {
        return this.accountGetUserInfoWithHttpInfo(extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json() || {};
            }
        });
    };
    /**
     *
     *
     */
    AccountApi.prototype.accountLogout = function (extraHttpRequestParams) {
        return this.accountLogoutWithHttpInfo(extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json() || {};
            }
        });
    };
    /**
     *
     *
     * @param model
     */
    AccountApi.prototype.accountRegister = function (model, extraHttpRequestParams) {
        return this.accountRegisterWithHttpInfo(model, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json() || {};
            }
        });
    };
    /**
     *
     *
     * @param model
     */
    AccountApi.prototype.accountRegisterExternal = function (model, extraHttpRequestParams) {
        return this.accountRegisterExternalWithHttpInfo(model, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json() || {};
            }
        });
    };
    /**
     *
     *
     * @param model
     */
    AccountApi.prototype.accountRemoveLogin = function (model, extraHttpRequestParams) {
        return this.accountRemoveLoginWithHttpInfo(model, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json() || {};
            }
        });
    };
    /**
     *
     *
     * @param model
     */
    AccountApi.prototype.accountSetPassword = function (model, extraHttpRequestParams) {
        return this.accountSetPasswordWithHttpInfo(model, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json() || {};
            }
        });
    };
    /**
     *
     *
     * @param model
     */
    AccountApi.prototype.accountAddExternalLoginWithHttpInfo = function (model, extraHttpRequestParams) {
        var path = this.basePath + '/api/User/AddExternalLogin';
        var queryParameters = new http_1.URLSearchParams();
        var headers = new http_1.Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'model' is not null or undefined
        if (model === null || model === undefined) {
            throw new Error('Required parameter model was null or undefined when calling accountAddExternalLogin.');
        }
        // to determine the Content-Type header
        var consumes = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'application/x-www-form-urlencoded'
        ];
        // to determine the Accept header
        var produces = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];
        headers.set('Content-Type', 'application/json');
        var requestOptions = new http_2.RequestOptions({
            method: http_2.RequestMethod.Post,
            headers: headers,
            body: model == null ? '' : JSON.stringify(model),
            search: queryParameters,
            withCredentials: this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     *
     *
     * @param model
     */
    AccountApi.prototype.accountChangePasswordWithHttpInfo = function (model, extraHttpRequestParams) {
        var path = this.basePath + '/api/User/ChangePassword';
        var queryParameters = new http_1.URLSearchParams();
        var headers = new http_1.Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'model' is not null or undefined
        if (model === null || model === undefined) {
            throw new Error('Required parameter model was null or undefined when calling accountChangePassword.');
        }
        // to determine the Content-Type header
        var consumes = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'application/x-www-form-urlencoded'
        ];
        // to determine the Accept header
        var produces = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];
        headers.set('Content-Type', 'application/json');
        var requestOptions = new http_2.RequestOptions({
            method: http_2.RequestMethod.Post,
            headers: headers,
            body: model == null ? '' : JSON.stringify(model),
            search: queryParameters,
            withCredentials: this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     *
     *
     * @param provider
     * @param error
     */
    AccountApi.prototype.accountGetExternalLoginWithHttpInfo = function (provider, error, extraHttpRequestParams) {
        var path = this.basePath + '/api/User/ExternalLogin';
        var queryParameters = new http_1.URLSearchParams();
        var headers = new http_1.Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'provider' is not null or undefined
        if (provider === null || provider === undefined) {
            throw new Error('Required parameter provider was null or undefined when calling accountGetExternalLogin.');
        }
        if (provider !== undefined) {
            queryParameters.set('provider', provider);
        }
        if (error !== undefined) {
            queryParameters.set('error', error);
        }
        // to determine the Content-Type header
        var consumes = [];
        // to determine the Accept header
        var produces = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];
        var requestOptions = new http_2.RequestOptions({
            method: http_2.RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            withCredentials: this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     *
     *
     * @param returnUrl
     * @param generateState
     */
    AccountApi.prototype.accountGetExternalLoginsWithHttpInfo = function (returnUrl, generateState, extraHttpRequestParams) {
        var path = this.basePath + '/api/User/ExternalLogins';
        var queryParameters = new http_1.URLSearchParams();
        var headers = new http_1.Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'returnUrl' is not null or undefined
        if (returnUrl === null || returnUrl === undefined) {
            throw new Error('Required parameter returnUrl was null or undefined when calling accountGetExternalLogins.');
        }
        if (returnUrl !== undefined) {
            queryParameters.set('returnUrl', returnUrl);
        }
        if (generateState !== undefined) {
            queryParameters.set('generateState', generateState);
        }
        // to determine the Content-Type header
        var consumes = [];
        // to determine the Accept header
        var produces = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];
        var requestOptions = new http_2.RequestOptions({
            method: http_2.RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            withCredentials: this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     *
     *
     * @param returnUrl
     * @param generateState
     */
    AccountApi.prototype.accountGetManageInfoWithHttpInfo = function (returnUrl, generateState, extraHttpRequestParams) {
        var path = this.basePath + '/api/User/ManageInfo';
        var queryParameters = new http_1.URLSearchParams();
        var headers = new http_1.Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'returnUrl' is not null or undefined
        if (returnUrl === null || returnUrl === undefined) {
            throw new Error('Required parameter returnUrl was null or undefined when calling accountGetManageInfo.');
        }
        if (returnUrl !== undefined) {
            queryParameters.set('returnUrl', returnUrl);
        }
        if (generateState !== undefined) {
            queryParameters.set('generateState', generateState);
        }
        // to determine the Content-Type header
        var consumes = [];
        // to determine the Accept header
        var produces = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];
        var requestOptions = new http_2.RequestOptions({
            method: http_2.RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            withCredentials: this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     *
     *
     */
    AccountApi.prototype.accountGetUserInfoWithHttpInfo = function (extraHttpRequestParams) {
        var path = this.basePath + '/api/User/UserInfo';
        var queryParameters = new http_1.URLSearchParams();
        var headers = new http_1.Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // to determine the Content-Type header
        var consumes = [];
        // to determine the Accept header
        var produces = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];
        var requestOptions = new http_2.RequestOptions({
            method: http_2.RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            withCredentials: this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     *
     *
     */
    AccountApi.prototype.accountLogoutWithHttpInfo = function (extraHttpRequestParams) {
        var path = this.basePath + '/api/User/Logout';
        var queryParameters = new http_1.URLSearchParams();
        var headers = new http_1.Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // to determine the Content-Type header
        var consumes = [];
        // to determine the Accept header
        var produces = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];
        var requestOptions = new http_2.RequestOptions({
            method: http_2.RequestMethod.Post,
            headers: headers,
            search: queryParameters,
            withCredentials: this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     *
     *
     * @param model
     */
    AccountApi.prototype.accountRegisterWithHttpInfo = function (model, extraHttpRequestParams) {
        var path = this.basePath + '/api/User/Register';
        var queryParameters = new http_1.URLSearchParams();
        var headers = new http_1.Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'model' is not null or undefined
        if (model === null || model === undefined) {
            throw new Error('Required parameter model was null or undefined when calling accountRegister.');
        }
        // to determine the Content-Type header
        var consumes = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'application/x-www-form-urlencoded'
        ];
        // to determine the Accept header
        var produces = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];
        headers.set('Content-Type', 'application/json');
        var requestOptions = new http_2.RequestOptions({
            method: http_2.RequestMethod.Post,
            headers: headers,
            body: model == null ? '' : JSON.stringify(model),
            search: queryParameters,
            withCredentials: this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     *
     *
     * @param model
     */
    AccountApi.prototype.accountRegisterExternalWithHttpInfo = function (model, extraHttpRequestParams) {
        var path = this.basePath + '/api/User/RegisterExternal';
        var queryParameters = new http_1.URLSearchParams();
        var headers = new http_1.Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'model' is not null or undefined
        if (model === null || model === undefined) {
            throw new Error('Required parameter model was null or undefined when calling accountRegisterExternal.');
        }
        // to determine the Content-Type header
        var consumes = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'application/x-www-form-urlencoded'
        ];
        // to determine the Accept header
        var produces = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];
        headers.set('Content-Type', 'application/json');
        var requestOptions = new http_2.RequestOptions({
            method: http_2.RequestMethod.Post,
            headers: headers,
            body: model == null ? '' : JSON.stringify(model),
            search: queryParameters,
            withCredentials: this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     *
     *
     * @param model
     */
    AccountApi.prototype.accountRemoveLoginWithHttpInfo = function (model, extraHttpRequestParams) {
        var path = this.basePath + '/api/User/RemoveLogin';
        var queryParameters = new http_1.URLSearchParams();
        var headers = new http_1.Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'model' is not null or undefined
        if (model === null || model === undefined) {
            throw new Error('Required parameter model was null or undefined when calling accountRemoveLogin.');
        }
        // to determine the Content-Type header
        var consumes = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'application/x-www-form-urlencoded'
        ];
        // to determine the Accept header
        var produces = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];
        headers.set('Content-Type', 'application/json');
        var requestOptions = new http_2.RequestOptions({
            method: http_2.RequestMethod.Post,
            headers: headers,
            body: model == null ? '' : JSON.stringify(model),
            search: queryParameters,
            withCredentials: this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     *
     *
     * @param model
     */
    AccountApi.prototype.accountSetPasswordWithHttpInfo = function (model, extraHttpRequestParams) {
        var path = this.basePath + '/api/User/SetPassword';
        var queryParameters = new http_1.URLSearchParams();
        var headers = new http_1.Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'model' is not null or undefined
        if (model === null || model === undefined) {
            throw new Error('Required parameter model was null or undefined when calling accountSetPassword.');
        }
        // to determine the Content-Type header
        var consumes = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'application/x-www-form-urlencoded'
        ];
        // to determine the Accept header
        var produces = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];
        headers.set('Content-Type', 'application/json');
        var requestOptions = new http_2.RequestOptions({
            method: http_2.RequestMethod.Post,
            headers: headers,
            body: model == null ? '' : JSON.stringify(model),
            search: queryParameters,
            withCredentials: this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    return AccountApi;
}());
AccountApi = __decorate([
    core_1.Injectable(),
    __param(1, core_1.Optional()), __param(1, core_1.Inject(variables_1.BASE_PATH)), __param(2, core_1.Optional())
], AccountApi);
exports.AccountApi = AccountApi;
